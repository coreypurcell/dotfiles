"
"set vim to use a shell for RVM
" set shell=bash

let &t_Co=256
:color jellybeans+
" if has('gui_running')
"   set background=light
" else
"   set background=dark
" endif

let mapleader = ","

" open files with <leader>f
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
" open files, limited to the directory of current file, with <leader>gf
" This requires the %% mapping found below
map <leader>gf :CommandTFlush<cr>\|:CommandT %%<cr>
let g:CommandTCancelMap=['<ESC>','<C-c>']


"Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

"Make the current window big, but leave context
" set winwidth=84
" " We have to have a winheight bigger than we want to set winminheight. But
" " if we set winheight to be huge before winminheight, the winminheight set
" " will fail
" set winheight=5
" set winminheight=5
" set winheight=999

nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l


"Run only the tests you want while moving around
function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo
  "exec ":!bundle exec rspec " . a:filename
  exec ":!time rspec " . a:filename
endfunction

"Run only the tests you want while moving around without bundler to speed
"things up
function! RunQuickTests(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo
  exec ":!rspec " . a:filename
endfunction

function! SetTestFile()
  "Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously marked file.
  let in_spec_file = match(expand("%"), '_spec.rb$') != -1
  if in_spec_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  endif
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number)
endfunction

"Run this file
map <leader>t :call RunTestFile()<cr>
"Run only the example under the cursor
map <leader>T :call RunNearestTest()<cr>
"Run all test files
map <leader>a :call RunTests('spec')<cr>

"Switch between last to files
noremap <leader><leader> <c-^>


"Enabling ruby text objects requires matchit
runtime macros/matchit.vim

"Clear search buffer after hitting return
:nnoremap <CR> :nohlsearch<cr>

" Use <c-h> for snippets
let g:NERDSnippets_key = '<c-h>'
map <leader>n :NERDTreeToggle<CR>

map <leader>te :ConqueTerm zsh<CR>

command! W :w
" Can't be bothered to understand the difference between ESC and <c-c> in
" " insert mode
imap <c-c> <esc>

if has("autocmd")
  autocmd BufReadPost fugitive://* set bufhidden=delete
endif

set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

runtime macros/matchit.vim
set nocompatible
if has("autocmd")
  filetype indent plugin on
endif

